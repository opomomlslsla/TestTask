// <auto-generated />
using System;
using Captcha.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Captcha.Infrastructure.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20241003113026_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Captcha.Domain.Entities.MousePositionData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("mousePositionData");
                });

            modelBuilder.Entity("Captcha.Domain.Entities.MousePositionData", b =>
                {
                    b.OwnsOne("Captcha.Domain.ValueObjects.PositionsData", "PositionsData", b1 =>
                        {
                            b1.Property<Guid>("MousePositionDataId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("T")
                                .HasColumnType("datetime2");

                            b1.Property<string>("X")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Y")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("MousePositionDataId");

                            b1.ToTable("mousePositionData");

                            b1.ToJson("PositionsData");

                            b1.WithOwner()
                                .HasForeignKey("MousePositionDataId");
                        });

                    b.Navigation("PositionsData")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
